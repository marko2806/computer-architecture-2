//======================================== PRIBAVI ===========================================
fetch0: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD;			//MAR <-PC
fetch1: ir1_sel=LOAD, read, if wait then goto fetch1 endif; 		//IR_high <- MEM(MAR)
fetch2: a_sel=7, c_in, alu_sel=ADDA, r7_write;				//PC <- PC + 1
fetch3: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD;			//MAR <-PC
fetch4: ir0_sel=LOAD, read, if wait then goto fetch4 endif; 		//IR_high <- MEM(MAR)
fetch5: a_sel=7, c_in, alu_sel=ADDA, r7_write, goto opcode[IR_OPCODE];	//PC <- PC + 1


// ======================================= OPERACIJSKI KODOVI =================================

// 0) NOP
opcode[0]: goto fetch0;

// 1) LOAD_IMMEDIATE (ri <- ir_const8)
opcode[1]: result_sel=IR_CONST8, ri_sel, goto fetch0;

// 2) ADD (ri <- rj + rk)
opcode[2]: ri_sel, rj_sel, rk_sel, alu_sel=ADD,
if m_7 then goto opcode2.1 else goto opcode2.2 endif;

// 3) HALT
opcode[3]: goto opcode[3];

// 4) MOVE ri,rj
opcode[4]: rj_sel, alu_sel=ADDA, result_sel=ALU, ri_sel, goto fetch0;

// 5) LOAD ri, addr    ri <- MEM(addr)
opcode[5]: result_sel=IR_CONST8, r4_write, goto opcode5.1;     	//r4 <- ir_const

// 6) STORE rj, (rk)     rj -> MEM(rk)
opcode[6]: rk_sel, alu_sel=ADDA, mar_sel=LOAD, goto opcode6.1;	//mar <- rk

// 7) JMP addr
opcode[7]: result_sel=IR_CONST8, r7_write, goto fetch0;		//pc <- IR_CONST8

// 8) JZ rj, rk
opcode[8]: rj_sel, alu_sel=ADDA, r4_write, 
		if m_7 then goto fetch0 else goto opcode8.1 endif; // r4 <- rj

// 9) SUB ri,rj,rk		ri <- rj - rk
opcode[9]: rj_sel, rk_sel, c_in, ri_sel, alu_sel=SUB, 
		if m_7 then goto opcode9.1 else goto opcode9.2 endif; //ri <- rj - rk

// 10) SHL ri, rj		ri <- rj * 2
opcode[10]: rj_sel, alu_sel=ADDA, result_sel=ALU, r4_write, goto opcode10.1; //r4 <- rj

// 11) LDSP konst		r5 <- konst
opcode[11]: result_sel=IR_CONST8, r5_write, goto fetch0;			   //r5 <- addr

// 12) PUSH	rj		rj na stog
opcode[12]: a_sel=5, alu_sel=ADDA, mar_sel=LOAD, goto opcode12.1;		   //mar <- r5

// 13) POP ri		podatak sa stoga u registar ri			   
opcode[13]: a_sel=5, alu_sel=SUBA, r5_write, goto opcode13.1;

// 14) CALL	addr		poziv potprograma na adresi addr
opcode[14]: a_sel=5, alu_sel=ADDA, mar_sel=LOAD,goto opcode14.1; 	// mar <- r5

// 15) RET			povratak iz potprograma
opcode[15]: a_sel=5, alu_sel=SUBA, r5_write, mar_sel=LOAD,goto opcode15.1;// mar <- r5 - 1


// ======================================= EXTENSIONS ========================================

// postavi zastavicu N
opcode2.1: a_sel=4, b_sel=4, alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, c_in, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 + c_in=1 -> r6 (SR)
// obrisi zastavicu N
opcode2.2: a_sel=4, b_sel=4, alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 -> r6 (SR)


opcode5.1: a_sel=4, alu_sel=ADDA,mar_sel=LOAD, goto opcode5.2;		//mar <- r4
opcode5.2: read, mdr_sel=LOAD_MEM,if wait then goto opcode5.2 else goto opcode5.3 endif;	//mdr <- mem(addr)
opcode5.3: result_sel=MDR, ri_sel, goto fetch0;				//ri <- mdr 

opcode6.1: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU, goto opcode6.2;	//mdr <- rj
opcode6.2: write, if wait then goto opcode6.2 else goto fetch0 endif;	//mem(mar) <- mdr

opcode8.1: a_sel=4, alu_sel=SUBA, r4_write, if m_7 then goto opcode8.2 else goto fetch0 endif;
opcode8.2: a_sel=4, c_in, rk_sel, alu_sel=ADD,r7_write, goto fetch0;

opcode9.1: a_sel = 4, b_sel = 4, alu_sel=XOR, r4_write; 
	   a_sel = 4, c_in, alu_sel= ADDA r6_write ,goto fetch0;
opcode9.2: a_sel = 4, b_sel = 4, alu_sel=XOR, r4_write;
	   a_sel = 4, alu_sel=ADDA, r6_write, goto fetch0;

opcode10.1: rj_sel, b_sel=4, alu_sel=ADD, ri_sel, goto fetch0;		//ri <- rj + r4

opcode12.1: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU, goto opcode12.2;	//mdr <- rj	
opcode12.2: write, if wait then goto opcode12.2 else goto opcode12.3 endif;//mem(mar) <- mdr
opcode12.3: a_sel=5, c_in, alu_sel=ADDA, r5_write, goto fetch0;		//r5 <- r5 + 1

opcode13.1: a_sel=5, alu_sel=ADDA, mar_sel=LOAD, goto opcode13.2;		   //mar <- r5
opcode13.2: read, mdr_sel=LOAD_MEM, if wait then goto opcode13.2 else goto opcode13.3 endif;  //mdr <- mem(mar)
opcode13.3: ri_sel, result_sel=MDR, goto fetch0;				 //ri <- mdr

opcode14.1: a_sel=7, alu_sel=ADDA, mdr_sel=LOAD_ALU, goto opcode14.2; //mdr <- r7
opcode14.2: write, if wait then goto opcode14.2 else goto opcode14.3 endif; //zapis u memoriju
opcode14.3: a_sel=5, c_in, alu_sel=ADDA, r5_write, goto opcode14.4;      //r5 <- r5 + 1
opcode14.4: result_sel=IR_CONST8, r7_write, goto fetch0;	      // r7 <- IR_CONST8

opcode15.1: read, mdr_sel=LOAD_MEM, if wait then goto opcode15.1 else goto opcode15.2 endif;
opcode15.2: result_sel=MDR, r7_write, goto fetch0;



